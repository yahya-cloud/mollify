{"version":3,"sources":["components/Form/FormInput/FormInput.js","components/Form/CheckValidaity.js","components/Form/Form.js","components/FormBuilder/FormAgain/FormAgain.js","components/FormBuilder/FormBuilder.js","components/UI/Button/Button.js"],"names":["FormInput","props","inputElement","inputClasses","errorMessage","inValid","shouldValidate","isTouched","push","className","elementType","join","type","elementConfig","value","onChange","changed","for","id","placeholder","slice","checkValidity","rules","isValid","required","trim","checkEmail","test","minSize","length","Form","useState","name","validation","valid","touched","email","subject","message","inputData","setInputData","formValidity","setFormValidity","headingColor","mainColor","inputElements","key","config","autocomplete","onSubmit","e","sendEmailHandler","heading","map","el","event","inputIdentifier","updatedInfoForm","updatedFormElement","target","formIsValid","changeInputHandler","Button","buttonType","marginTop","disable","buttonColor","FormAgain","text","errorText","src","Logo","alt","color","buttonFunction","form","FormBuilder","showForm","setShowForm","loader","setLoader","sendAgain","setSendAgain","error","setError","initForm","a","preventDefault","emailjs","sendForm","formHeading","Spinner","sideContainerColor","useEffect","sideContainerForm","document","querySelector","imgContainer","console","log","formOrder","style","animation","order","backgroundColor","imgContainerHeading","img","button","buttonClass","disableClass","scroll","onClick","x","y","smooth","children","to","linkTo","disabled"],"mappings":"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","file":"static/js/5.12371305.chunk.js","sourcesContent":["import React from 'react';\r\nimport './FormInput.css';\r\n\r\n\r\nconst FormInput = (props) => {\r\n\r\n    let inputElement = null;\r\n    const inputClasses = [\"input\"];\r\n    let errorMessage = null;\r\n\r\n    if(props.inValid && props.shouldValidate && props.isTouched){\r\n        inputClasses.push(\"invalid\")\r\n        errorMessage = (<p className=\"errorMessage\">Please enter valid value</p>)\r\n    }\r\n\r\n    switch (props.elementType) {\r\n        case 'input':\r\n\r\n        inputElement =  <input\r\n        className={inputClasses.join(\" \")}\r\n        type=\"text\"\r\n        {...props.elementConfig}\r\n        value={props.value}\r\n        onChange={props.changed}\r\n        /> \r\n        break;\r\n\r\n        \r\n        case ('text-area'):\r\n        inputElement = <textarea\r\n        className= 'input input--textArea'\r\n        {...props.elementConfig}\r\n        value={props.value} \r\n        onChange={props.changed}\r\n        />    \r\n        break;\r\n        \r\n              \r\n        \r\n        default:\r\n            break;\r\n    }\r\n\r\n    return (\r\n        <div className=\"inputContainer\">\r\n               \r\n               \r\n\r\n                <label\r\n                 className=\"label\"\r\n                 for={props.elementConfig.id}>\r\n                 {props.elementConfig.placeholder.slice(5)}\r\n                </label>\r\n                {inputElement} \r\n                {errorMessage}\r\n                </div>\r\n    )\r\n}\r\n\r\nexport default FormInput;","const checkValidity = (value, rules) => {\r\n    \r\n    let isValid = true;\r\n    if(!rules){return true}\r\n    if(rules.required){\r\n        isValid = value.trim() !== \"\" && isValid;\r\n    }\r\n    if(rules.checkEmail){\r\n        const pattern =  /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/;\r\n        isValid = pattern.test(value) && isValid;\r\n    }\r\n\r\n    if(rules.minSize){\r\n        isValid = value.trim().length > rules.minSize\r\n    }\r\n    return isValid\r\n}\r\n\r\nexport default checkValidity;","import React, { useState } from 'react'\r\n\r\nimport './Form.css';\r\nimport '../../index.css';\r\n\r\n\r\n\r\nimport FormInput from './FormInput/FormInput';\r\nimport checkValidity from './CheckValidaity';\r\nimport Button from '../../components/UI/Button/Button';\r\n\r\n \r\n\r\nconst  Form = (props) =>{\r\n\r\n    const [inputData, setInputData] = useState({\r\n            name:{\r\n                elementType: \"input\",\r\n                elementConfig: {\r\n                    type: \"text\",\r\n                    placeholder: \"Enter Your Name*\",\r\n                    id:\"name\",\r\n                    name:\"name\"\r\n                },\r\n                value:\"\",\r\n                validation:{\r\n                    required: true,\r\n                    minSize: 2\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n\r\n            email:{\r\n                elementType:\"input\",\r\n                elementConfig:{\r\n                    type:\"email\",\r\n                    placeholder:\"Enter Your Email*\",\r\n                    id:\"email\",\r\n                    name:\"email\"\r\n                },\r\n                value:\"\",\r\n                validation:{\r\n                   required: true,\r\n                   checkEmail: true\r\n               },\r\n               valid: false,\r\n               touched: false\r\n            },\r\n\r\n            subject:{\r\n                elementType: \"input\",\r\n                elementConfig: {\r\n                    type: \"text\",\r\n                    placeholder: \"Enter Subject\",\r\n                    id:\"name\",\r\n                    name:\"subject\"\r\n                },\r\n                value:\"\",\r\n                validation:{},\r\n                valid: true,\r\n                touched: false\r\n            },\r\n\r\n            message:{\r\n                elementType:\"text-area\",\r\n                elementConfig:{\r\n                    type:\"text-area\",\r\n                    placeholder:\"Write  Message \",\r\n                    id:\"message\",\r\n                    name:\"message\"\r\n                },\r\n                value:\"\",\r\n                validation:{},\r\n                valid: true,\r\n                touched: false \r\n            }\r\n\r\n        }\r\n    )\r\n\r\n    const [formValidity, setFormValidity] = useState(false)\r\n\r\n\r\n    // eslint-disable-next-line no-undef\r\n    const  changeInputHandler = (event, inputIdentifier) => {\r\n        const updatedInfoForm = {\r\n            ...inputData\r\n        }\r\n        const updatedFormElement = {\r\n            ...updatedInfoForm[inputIdentifier]\r\n        }\r\n\r\n        updatedFormElement.value = event.target.value;\r\n        updatedFormElement.valid = checkValidity(updatedFormElement.value, updatedFormElement.validation);\r\n        updatedFormElement.touched =  true;\r\n        updatedInfoForm[inputIdentifier] = updatedFormElement;\r\n        \r\n        let formIsValid = true;\r\n        for(let inputIdentifier in updatedInfoForm){\r\n            formIsValid = updatedInfoForm[inputIdentifier].valid && formIsValid;\r\n        }\r\n        \r\n        setInputData(updatedInfoForm)\r\n        setFormValidity(formIsValid)\r\n        \r\n        }\r\n\r\n\r\n    let form = null;\r\n    let headingColor = null;\r\n    props.mainColor === 'red' ? \r\n    headingColor = \"heading--red\" :\r\n    headingColor = \"heading--green\";\r\n\r\n    let inputElements = [];\r\n        for(let key in inputData){\r\n            inputElements.push({\r\n                id:key,\r\n                config: inputData[key]\r\n            })\r\n        }\r\n\r\n  \r\n\r\n    form = (<form autocomplete=\"off\" className=\"form\" onSubmit={(e) => props.sendEmailHandler(e)}>\r\n            <h1 className={`main__heading heading--form ${headingColor}`}>\r\n           {props.heading}\r\n            </h1>\r\n\r\n            {inputElements.map(el => {\r\n                return <FormInput \r\n                key = {el.id}  \r\n                elementType={el.config.elementType}\r\n                elementConfig={el.config.elementConfig}\r\n                value={el.config.value}\r\n                inValid={!el.config.valid}\r\n                shouldValidate = {el.config.validation}\r\n                isTouched = {el.config.touched} \r\n                changed = {(e) => changeInputHandler(e, el.id)}\r\n                />\r\n            })}\r\n\r\n            <Button \r\n            buttonType=\"formButton\"\r\n            marginTop= \"5\"\r\n            disable={!formValidity} \r\n            buttonColor={props.mainColor === \"red\" ? \"red\" : \"green\"} \r\n            >\r\n            Submit\r\n            </Button>\r\n            \r\n            </form>\r\n        )\r\n       \r\n\r\n\r\n        return (\r\n             form\r\n        )\r\n    }\r\n\r\n\r\nexport default Form;","import React from 'react';\r\nimport './FormAgain.css';\r\n\r\nimport Logo from '../../../assets/logo.png';\r\nimport Button from '../../UI/Button/Button';\r\n\r\nconst FormAgain = (props) => {\r\n    let text = \"Your response have been recorded Mollify team will get in touch with you as soon as possible\"\r\n    if(props.errorText){\r\n        text = \"Oops Something went wrong Please try again\"\r\n    }\r\n    return (\r\n        <div className=\"formAgain__container\">\r\n            <img className='formAgain__img'  src={Logo} alt=\"logo\" /> \r\n            \r\n            <h3 className='paragraph formAgain__para'>\r\n            {text}\r\n            </h3>\r\n\r\n            <Button\r\n            buttonColor={props.color}\r\n            buttonFunction={props.buttonFunction} \r\n            buttonType=\"functionButton\">Submit Again</Button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FormAgain;","import React, {useState, useEffect} from 'react'\r\nimport Form from '../Form/Form';\r\n\r\n\r\nimport \"./FormBuilder.css\";\r\nimport Spinner from '../UI/Spinner/Spinner';\r\nimport emailjs from 'emailjs-com';\r\nimport FormAgain from './FormAgain/FormAgain';\r\n\r\nlet form = null;\r\n\r\n\r\nconst FormBuilder = (props) => {\r\n\r\n    const [showForm, setShowForm] = useState(true);\r\n    const [loader, setLoader] = useState(false);\r\n    const [sendAgain, setSendAgain] = useState(false);\r\n    const [error, setError] = useState(false)\r\n\r\n    const initForm = () => {\r\n        setShowForm(true);\r\n        setLoader(false);\r\n        setSendAgain(false);\r\n    }\r\n\r\n    const sendEmailHandler = async (e) => {\r\n        try{\r\n            e.preventDefault();\r\n            setShowForm(false);\r\n            setLoader(true);\r\n            await (emailjs.sendForm('service_jx83m7n', 'template_dhckn4h', e.target, 'user_t9QuEp0IHc8KGEGU7N6tQ'))\r\n            setLoader(false);\r\n            setSendAgain(true);\r\n        }\r\n        catch(error){\r\n            setLoader(false)\r\n            setError(true)         \r\n            setSendAgain(true)\r\n        }\r\n\r\n    }    \r\n   \r\n    if(showForm){\r\n        form =  <Form \r\n        sendEmailHandler={sendEmailHandler}\r\n        mainColor= {props.mainColor} \r\n        heading={props.formHeading}/>\r\n    }\r\n    if(loader){\r\n        form =  <Spinner color={props.sideContainerColor} />\r\n    }\r\n    if(sendAgain){\r\n        error ?\r\n        form = <FormAgain errorText={true} color={props.mainColor} buttonFunction={initForm} />\r\n        : form = <FormAgain color={props.mainColor} buttonFunction={initForm} />\r\n    }\r\n\r\n\r\n\r\n   \r\n       \r\n    \r\n    \r\n\r\n    useEffect(() => {\r\n        initForm()\r\n        let sideContainerForm = document.querySelector('.sideContainer__form');\r\n        let imgContainer = document.querySelector('.sideContainer__imgContainer');\r\n        console.log(imgContainer)\r\n        if(props.formOrder < 0){\r\n            imgContainer.style.animation = 'fadeRight .8s ease forwards';\r\n            imgContainer.style.order = -1\r\n            sideContainerForm.style.animation = 'fadeLeft .8s ease forwards'\r\n        }else{\r\n            imgContainer.style.animation = 'fadeLeft .8s ease forwards';\r\n            imgContainer.style.order = 1\r\n            sideContainerForm.style.animation = 'fadeRight .8s ease forwards'\r\n        }\r\n\r\n     }, [props])\r\n \r\n    return (\r\n        <div className=\"Form__container\">\r\n            <div\r\n            className=\"sideContainer__form\">\r\n           {form}\r\n            </div>\r\n\r\n            <div \r\n            style={{backgroundColor:props.sideContainerColor}}\r\n            className=\"sideContainer__imgContainer\">\r\n            <h2 className=\"heading--formSideContainer\">{props.imgContainerHeading}</h2>\r\n            <img className=\"sideImg  sideImg--contact\" src={props.img} alt={props.formHeading} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FormBuilder;","import React from 'react';\r\nimport './Button.css';\r\nimport { ScrollTo } from \"react-scroll-to\";\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\n\r\nconst Button = (props) => {\r\n    let button = null;\r\n    let buttonClass = null;\r\n\r\n    let disableClass = null;\r\n    if(props.disable){\r\n      disableClass = \"disable\"\r\n    }\r\n\r\n    \r\n\r\n    props.buttonColor === \"red\" ?\r\n    buttonClass = \"button--red\" \r\n    :   buttonClass = \"button--green\"; \r\n\r\n    switch (props.buttonType) {\r\n\r\n        case \"scrollButton\":\r\n          button = <ScrollTo >\r\n          {({ scroll }) => (\r\n            // eslint-disable-next-line jsx-a11y/anchor-is-valid\r\n            <a \r\n            className={`button ${buttonClass}`}\r\n            onClick={() => scroll({ x: 0, y: 750, smooth:'true' })} >    \r\n            {props.children}     \r\n            </a> \r\n          )}\r\n        </ScrollTo>\r\n      break;\r\n\r\n      case \"buttonNavigate\" :\r\n        // eslint-disable-next-line jsx-a11y/anchor-is-valid\r\n     button =  <Link \r\n     to={props.linkTo}\r\n     className={`button ${buttonClass}`}>\r\n       {props.children}\r\n     </Link>\r\n    break;\r\n\r\n\r\n      case \"formButton\" :\r\n       button =  <button\r\n         type=\"submit\"\r\n         className={`button formButton ${buttonClass} ${disableClass}`}\r\n         disabled={props.disable}\r\n         >\r\n        {props.children}\r\n         </button>            \r\n         break;  \r\n         \r\n      case \"functionButton\":\r\n        button =  <button\r\n        onClick= {() => props.buttonFunction()}\r\n        className={`button ${buttonClass} `}\r\n        >\r\n       {props.children}\r\n        </button>            \r\n      break;  \r\n\r\n\r\n        default:\r\n            break;\r\n    }\r\n\r\n\r\n    return (button)\r\n}\r\n\r\nexport default Button;"],"sourceRoot":""}